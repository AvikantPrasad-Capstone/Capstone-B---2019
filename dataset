{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import scipy.io\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.models import Sequential\n",
    "from keras.callbacks import EarlyStopping\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn import metrics\n",
    "from keras.layers.core import Dense, Activation\n",
    "import pandas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"kddcup99.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>protocol_type</th>\n",
       "      <th>service</th>\n",
       "      <th>flag</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_srv_count</th>\n",
       "      <th>dst_host_same_srv_rate</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "      <th>outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>239</td>\n",
       "      <td>486</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>235</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>219</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>49.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration protocol_type service flag  src_bytes  dst_bytes  land  \\\n",
       "0         0           tcp    http   SF        239        486     0   \n",
       "1         0           tcp    http   SF        235       1337     0   \n",
       "2         0           tcp    http   SF        219       1337     0   \n",
       "3         0           tcp    http   SF        217       2032     0   \n",
       "4         0           tcp    http   SF        217       2032     0   \n",
       "\n",
       "   wrong_fragment  urgent  hot  ...  dst_host_srv_count  \\\n",
       "0               0       0    0  ...                19.0   \n",
       "1               0       0    0  ...                29.0   \n",
       "2               0       0    0  ...                39.0   \n",
       "3               0       0    0  ...                49.0   \n",
       "4               0       0    0  ...                59.0   \n",
       "\n",
       "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
       "0                     1.0                     0.0   \n",
       "1                     1.0                     0.0   \n",
       "2                     1.0                     0.0   \n",
       "3                     1.0                     0.0   \n",
       "4                     1.0                     0.0   \n",
       "\n",
       "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                         0.05                          0.0   \n",
       "1                         0.03                          0.0   \n",
       "2                         0.03                          0.0   \n",
       "3                         0.02                          0.0   \n",
       "4                         0.02                          0.0   \n",
       "\n",
       "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0                   0.0                       0.0                   0.0   \n",
       "1                   0.0                       0.0                   0.0   \n",
       "2                   0.0                       0.0                   0.0   \n",
       "3                   0.0                       0.0                   0.0   \n",
       "4                   0.0                       0.0                   0.0   \n",
       "\n",
       "   dst_host_srv_rerror_rate  outcome  \n",
       "0                       0.0  normal.  \n",
       "1                       0.0  normal.  \n",
       "2                       0.0  normal.  \n",
       "3                       0.0  normal.  \n",
       "4                       0.0  normal.  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns = [\n",
    "    'duration',\n",
    "    'protocol_type',\n",
    "    'service',\n",
    "    'flag',\n",
    "    'src_bytes',\n",
    "    'dst_bytes',\n",
    "    'land',\n",
    "    'wrong_fragment',\n",
    "    'urgent',\n",
    "    'hot',\n",
    "    'num_failed_logins',\n",
    "    'logged_in',\n",
    "    'num_compromised',\n",
    "    'root_shell',\n",
    "    'su_attempted',\n",
    "    'num_root',\n",
    "    'num_file_creations',\n",
    "    'num_shells',\n",
    "    'num_access_files',\n",
    "    'num_outbound_cmds',\n",
    "    'is_host_login',\n",
    "    'is_guest_login',\n",
    "    'count',\n",
    "    'srv_count',\n",
    "    'serror_rate',\n",
    "    'srv_serror_rate',\n",
    "    'rerror_rate',\n",
    "    'srv_rerror_rate',\n",
    "    'same_srv_rate',\n",
    "    'diff_srv_rate',\n",
    "    'srv_diff_host_rate',\n",
    "    'dst_host_count',\n",
    "    'dst_host_srv_count',\n",
    "    'dst_host_same_srv_rate',\n",
    "    'dst_host_diff_srv_rate',\n",
    "    'dst_host_same_src_port_rate',\n",
    "    'dst_host_srv_diff_host_rate',\n",
    "    'dst_host_serror_rate',\n",
    "    'dst_host_srv_serror_rate',\n",
    "    'dst_host_rerror_rate',\n",
    "    'dst_host_srv_rerror_rate',\n",
    "    'outcome'\n",
    "]\n",
    "\n",
    "# display 5 rows\n",
    "\n",
    "\n",
    "#cleaning up data and dropping NaN and Infinity Values\n",
    "df = df.dropna()\n",
    "assert pd.isnull(df).sum().sum() == 0 \n",
    "assert pd.isna(df).sum().sum() == 0\n",
    "df.replace(np.nan, 0, inplace=True)\n",
    "\n",
    "df[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>protocol_type</th>\n",
       "      <th>service</th>\n",
       "      <th>flag</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_count</th>\n",
       "      <th>dst_host_srv_count</th>\n",
       "      <th>dst_host_same_srv_rate</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>239</td>\n",
       "      <td>486</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>235</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>219</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>49.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>tcp</td>\n",
       "      <td>http</td>\n",
       "      <td>SF</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration protocol_type service flag  src_bytes  dst_bytes  land  \\\n",
       "0         0           tcp    http   SF        239        486     0   \n",
       "1         0           tcp    http   SF        235       1337     0   \n",
       "2         0           tcp    http   SF        219       1337     0   \n",
       "3         0           tcp    http   SF        217       2032     0   \n",
       "4         0           tcp    http   SF        217       2032     0   \n",
       "\n",
       "   wrong_fragment  urgent  hot  ...  dst_host_count  dst_host_srv_count  \\\n",
       "0               0       0    0  ...            19.0                19.0   \n",
       "1               0       0    0  ...            29.0                29.0   \n",
       "2               0       0    0  ...            39.0                39.0   \n",
       "3               0       0    0  ...            49.0                49.0   \n",
       "4               0       0    0  ...            59.0                59.0   \n",
       "\n",
       "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
       "0                     1.0                     0.0   \n",
       "1                     1.0                     0.0   \n",
       "2                     1.0                     0.0   \n",
       "3                     1.0                     0.0   \n",
       "4                     1.0                     0.0   \n",
       "\n",
       "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                         0.05                          0.0   \n",
       "1                         0.03                          0.0   \n",
       "2                         0.03                          0.0   \n",
       "3                         0.02                          0.0   \n",
       "4                         0.02                          0.0   \n",
       "\n",
       "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0                   0.0                       0.0                   0.0   \n",
       "1                   0.0                       0.0                   0.0   \n",
       "2                   0.0                       0.0                   0.0   \n",
       "3                   0.0                       0.0                   0.0   \n",
       "4                   0.0                       0.0                   0.0   \n",
       "\n",
       "   dst_host_srv_rerror_rate  \n",
       "0                       0.0  \n",
       "1                       0.0  \n",
       "2                       0.0  \n",
       "3                       0.0  \n",
       "4                       0.0  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Convert Malicious packets into true and normal into false\n",
    "\n",
    "df['Target'] = df['outcome'] != 'normal.'\n",
    "df = df.drop('outcome', axis=1)\n",
    "\n",
    "#Features\n",
    "x = df.drop(['Target'], axis = 1)\n",
    "y = df[['Target']]\n",
    "\n",
    "#Outcomes - Turning into Dummy variables as string cantnot passs through an array into the neural net.\n",
    "#y = df['outcome']\n",
    "#dummies = pd.get_dummies(y['outcome'])\n",
    "#y = dummies.values\n",
    "\n",
    "df = pd.DataFrame(x)\n",
    "\n",
    "df[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorical boolean mask\n",
    "# shows amount of categorical features \n",
    "cat_features = x.dtypes==object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "duration                       False\n",
       "protocol_type                   True\n",
       "service                         True\n",
       "flag                            True\n",
       "src_bytes                      False\n",
       "dst_bytes                      False\n",
       "land                           False\n",
       "wrong_fragment                 False\n",
       "urgent                         False\n",
       "hot                            False\n",
       "num_failed_logins              False\n",
       "logged_in                      False\n",
       "num_compromised                False\n",
       "root_shell                     False\n",
       "su_attempted                   False\n",
       "num_root                       False\n",
       "num_file_creations             False\n",
       "num_shells                     False\n",
       "num_access_files               False\n",
       "num_outbound_cmds              False\n",
       "is_host_login                  False\n",
       "is_guest_login                 False\n",
       "count                          False\n",
       "srv_count                      False\n",
       "serror_rate                    False\n",
       "srv_serror_rate                False\n",
       "rerror_rate                    False\n",
       "srv_rerror_rate                False\n",
       "same_srv_rate                  False\n",
       "diff_srv_rate                  False\n",
       "srv_diff_host_rate             False\n",
       "dst_host_count                 False\n",
       "dst_host_srv_count             False\n",
       "dst_host_same_srv_rate         False\n",
       "dst_host_diff_srv_rate         False\n",
       "dst_host_same_src_port_rate    False\n",
       "dst_host_srv_diff_host_rate    False\n",
       "dst_host_serror_rate           False\n",
       "dst_host_srv_serror_rate       False\n",
       "dst_host_rerror_rate           False\n",
       "dst_host_srv_rerror_rate       False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter categorical columns using mask and turn it into a list\n",
    "categorical_cols = x.columns[cat_features].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['protocol_type', 'service', 'flag']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>protocol_type</th>\n",
       "      <th>service</th>\n",
       "      <th>flag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   protocol_type  service  flag\n",
       "0              1       22     9\n",
       "1              1       22     9\n",
       "2              1       22     9\n",
       "3              1       22     9\n",
       "4              1       22     9"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import labelencoder\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "# instantiate labelencoder object\n",
    "le = LabelEncoder()\n",
    "\n",
    "# apply le on categorical feature columns\n",
    "x[categorical_cols] = x[categorical_cols].apply(lambda col: le.fit_transform(col))\n",
    "\n",
    "x[categorical_cols].head(5)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>num_failed_logins</th>\n",
       "      <th>logged_in</th>\n",
       "      <th>num_compromised</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "      <th>['service']['flag']0</th>\n",
       "      <th>['service']['flag']1</th>\n",
       "      <th>['service']['flag']2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239</td>\n",
       "      <td>486</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>235</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>219</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>1940</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>159</td>\n",
       "      <td>4087</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>210</td>\n",
       "      <td>151</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>786</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration  src_bytes  dst_bytes  land  wrong_fragment  urgent  hot  \\\n",
       "0         0        239        486     0               0       0    0   \n",
       "1         0        235       1337     0               0       0    0   \n",
       "2         0        219       1337     0               0       0    0   \n",
       "3         0        217       2032     0               0       0    0   \n",
       "4         0        217       2032     0               0       0    0   \n",
       "5         0        212       1940     0               0       0    0   \n",
       "6         0        159       4087     0               0       0    0   \n",
       "7         0        210        151     0               0       0    0   \n",
       "8         0        212        786     0               0       0    1   \n",
       "\n",
       "   num_failed_logins  logged_in  num_compromised  ...  dst_host_diff_srv_rate  \\\n",
       "0                  0          1                0  ...                     0.0   \n",
       "1                  0          1                0  ...                     0.0   \n",
       "2                  0          1                0  ...                     0.0   \n",
       "3                  0          1                0  ...                     0.0   \n",
       "4                  0          1                0  ...                     0.0   \n",
       "5                  0          1                0  ...                     0.0   \n",
       "6                  0          1                0  ...                     0.0   \n",
       "7                  0          1                0  ...                     0.0   \n",
       "8                  0          1                0  ...                     0.0   \n",
       "\n",
       "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                         0.05                         0.00   \n",
       "1                         0.03                         0.00   \n",
       "2                         0.03                         0.00   \n",
       "3                         0.02                         0.00   \n",
       "4                         0.02                         0.00   \n",
       "5                         1.00                         0.04   \n",
       "6                         0.09                         0.04   \n",
       "7                         0.12                         0.04   \n",
       "8                         0.12                         0.05   \n",
       "\n",
       "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0                   0.0                       0.0                   0.0   \n",
       "1                   0.0                       0.0                   0.0   \n",
       "2                   0.0                       0.0                   0.0   \n",
       "3                   0.0                       0.0                   0.0   \n",
       "4                   0.0                       0.0                   0.0   \n",
       "5                   0.0                       0.0                   0.0   \n",
       "6                   0.0                       0.0                   0.0   \n",
       "7                   0.0                       0.0                   0.0   \n",
       "8                   0.0                       0.0                   0.0   \n",
       "\n",
       "   dst_host_srv_rerror_rate  ['service']['flag']0  ['service']['flag']1  \\\n",
       "0                       0.0                     0                     1   \n",
       "1                       0.0                     0                     1   \n",
       "2                       0.0                     0                     1   \n",
       "3                       0.0                     0                     1   \n",
       "4                       0.0                     0                     1   \n",
       "5                       0.0                     0                     1   \n",
       "6                       0.0                     0                     1   \n",
       "7                       0.0                     0                     1   \n",
       "8                       0.0                     0                     1   \n",
       "\n",
       "   ['service']['flag']2  \n",
       "0                     0  \n",
       "1                     0  \n",
       "2                     0  \n",
       "3                     0  \n",
       "4                     0  \n",
       "5                     0  \n",
       "6                     0  \n",
       "7                     0  \n",
       "8                     0  \n",
       "\n",
       "[9 rows x 41 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Turn categorical data into intergers of 0 & 1 \n",
    "\n",
    "dummies = pd.get_dummies(df['protocol_type'],['service'],['flag'])\n",
    "\n",
    "#drop as column is now encoded\n",
    "x = x.drop(['protocol_type','service','flag'], axis = 1)\n",
    "\n",
    "#concat dummy values to the dataframe\n",
    "\n",
    "x = x.join(dummies)\n",
    "\n",
    "\n",
    "x[0:9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop the last dummy section \n",
    "#dummy variable trap\n",
    "x = x.drop(x.columns[-1], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>num_failed_logins</th>\n",
       "      <th>logged_in</th>\n",
       "      <th>num_compromised</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_same_srv_rate</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "      <th>['service']['flag']0</th>\n",
       "      <th>['service']['flag']1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239</td>\n",
       "      <td>486</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>235</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>219</td>\n",
       "      <td>1337</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>217</td>\n",
       "      <td>2032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>316583</td>\n",
       "      <td>0</td>\n",
       "      <td>1032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>316584</td>\n",
       "      <td>0</td>\n",
       "      <td>1032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>316585</td>\n",
       "      <td>0</td>\n",
       "      <td>1032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>316586</td>\n",
       "      <td>0</td>\n",
       "      <td>1032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>316587</td>\n",
       "      <td>0</td>\n",
       "      <td>1032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>316588 rows Ã— 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        duration  src_bytes  dst_bytes  land  wrong_fragment  urgent  hot  \\\n",
       "0              0        239        486     0               0       0    0   \n",
       "1              0        235       1337     0               0       0    0   \n",
       "2              0        219       1337     0               0       0    0   \n",
       "3              0        217       2032     0               0       0    0   \n",
       "4              0        217       2032     0               0       0    0   \n",
       "...          ...        ...        ...   ...             ...     ...  ...   \n",
       "316583         0       1032          0     0               0       0    0   \n",
       "316584         0       1032          0     0               0       0    0   \n",
       "316585         0       1032          0     0               0       0    0   \n",
       "316586         0       1032          0     0               0       0    0   \n",
       "316587         0       1032          0     0               0       0    0   \n",
       "\n",
       "        num_failed_logins  logged_in  num_compromised  ...  \\\n",
       "0                       0          1                0  ...   \n",
       "1                       0          1                0  ...   \n",
       "2                       0          1                0  ...   \n",
       "3                       0          1                0  ...   \n",
       "4                       0          1                0  ...   \n",
       "...                   ...        ...              ...  ...   \n",
       "316583                  0          0                0  ...   \n",
       "316584                  0          0                0  ...   \n",
       "316585                  0          0                0  ...   \n",
       "316586                  0          0                0  ...   \n",
       "316587                  0          0                0  ...   \n",
       "\n",
       "        dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
       "0                          1.0                     0.0   \n",
       "1                          1.0                     0.0   \n",
       "2                          1.0                     0.0   \n",
       "3                          1.0                     0.0   \n",
       "4                          1.0                     0.0   \n",
       "...                        ...                     ...   \n",
       "316583                     1.0                     0.0   \n",
       "316584                     1.0                     0.0   \n",
       "316585                     1.0                     0.0   \n",
       "316586                     1.0                     0.0   \n",
       "316587                     1.0                     0.0   \n",
       "\n",
       "        dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                              0.05                          0.0   \n",
       "1                              0.03                          0.0   \n",
       "2                              0.03                          0.0   \n",
       "3                              0.02                          0.0   \n",
       "4                              0.02                          0.0   \n",
       "...                             ...                          ...   \n",
       "316583                         1.00                          0.0   \n",
       "316584                         1.00                          0.0   \n",
       "316585                         1.00                          0.0   \n",
       "316586                         1.00                          0.0   \n",
       "316587                         1.00                          0.0   \n",
       "\n",
       "        dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0                        0.0                       0.0                   0.0   \n",
       "1                        0.0                       0.0                   0.0   \n",
       "2                        0.0                       0.0                   0.0   \n",
       "3                        0.0                       0.0                   0.0   \n",
       "4                        0.0                       0.0                   0.0   \n",
       "...                      ...                       ...                   ...   \n",
       "316583                   0.0                       0.0                   0.0   \n",
       "316584                   0.0                       0.0                   0.0   \n",
       "316585                   0.0                       0.0                   0.0   \n",
       "316586                   0.0                       0.0                   0.0   \n",
       "316587                   0.0                       0.0                   0.0   \n",
       "\n",
       "        dst_host_srv_rerror_rate  ['service']['flag']0  ['service']['flag']1  \n",
       "0                            0.0                     0                     1  \n",
       "1                            0.0                     0                     1  \n",
       "2                            0.0                     0                     1  \n",
       "3                            0.0                     0                     1  \n",
       "4                            0.0                     0                     1  \n",
       "...                          ...                   ...                   ...  \n",
       "316583                       0.0                     1                     0  \n",
       "316584                       0.0                     1                     0  \n",
       "316585                       0.0                     1                     0  \n",
       "316586                       0.0                     1                     0  \n",
       "316587                       0.0                     1                     0  \n",
       "\n",
       "[316588 rows x 40 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0]\n",
      " [1 0]\n",
      " [1 0]\n",
      " ...\n",
      " [0 1]\n",
      " [0 1]\n",
      " [0 1]]\n"
     ]
    }
   ],
   "source": [
    "# Turn Outcomes into dummy variables \n",
    "\n",
    "dummies = pd.get_dummies(y['Target'])\n",
    "\n",
    "# This will turn BENIGN values into 1 being False and all malicious packets into 0 being True. \n",
    "y = dummies.values\n",
    "\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>num_failed_logins</th>\n",
       "      <th>logged_in</th>\n",
       "      <th>num_compromised</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_same_srv_rate</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "      <th>['service']['flag']0</th>\n",
       "      <th>['service']['flag']1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-0.033283</td>\n",
       "      <td>-0.003377</td>\n",
       "      <td>-0.017420</td>\n",
       "      <td>-0.007328</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>-0.052508</td>\n",
       "      <td>-0.012108</td>\n",
       "      <td>2.017251</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.451551</td>\n",
       "      <td>-0.221127</td>\n",
       "      <td>-1.287546</td>\n",
       "      <td>-0.190865</td>\n",
       "      <td>-0.390287</td>\n",
       "      <td>-0.388853</td>\n",
       "      <td>-0.138878</td>\n",
       "      <td>-0.135406</td>\n",
       "      <td>-1.298495</td>\n",
       "      <td>1.368445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-0.033283</td>\n",
       "      <td>-0.003380</td>\n",
       "      <td>0.003670</td>\n",
       "      <td>-0.007328</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>-0.052508</td>\n",
       "      <td>-0.012108</td>\n",
       "      <td>2.017251</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.451551</td>\n",
       "      <td>-0.221127</td>\n",
       "      <td>-1.330369</td>\n",
       "      <td>-0.190865</td>\n",
       "      <td>-0.390287</td>\n",
       "      <td>-0.388853</td>\n",
       "      <td>-0.138878</td>\n",
       "      <td>-0.135406</td>\n",
       "      <td>-1.298495</td>\n",
       "      <td>1.368445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.033283</td>\n",
       "      <td>-0.003393</td>\n",
       "      <td>0.003670</td>\n",
       "      <td>-0.007328</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>-0.052508</td>\n",
       "      <td>-0.012108</td>\n",
       "      <td>2.017251</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.451551</td>\n",
       "      <td>-0.221127</td>\n",
       "      <td>-1.330369</td>\n",
       "      <td>-0.190865</td>\n",
       "      <td>-0.390287</td>\n",
       "      <td>-0.388853</td>\n",
       "      <td>-0.138878</td>\n",
       "      <td>-0.135406</td>\n",
       "      <td>-1.298495</td>\n",
       "      <td>1.368445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-0.033283</td>\n",
       "      <td>-0.003394</td>\n",
       "      <td>0.020894</td>\n",
       "      <td>-0.007328</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>-0.052508</td>\n",
       "      <td>-0.012108</td>\n",
       "      <td>2.017251</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.451551</td>\n",
       "      <td>-0.221127</td>\n",
       "      <td>-1.351780</td>\n",
       "      <td>-0.190865</td>\n",
       "      <td>-0.390287</td>\n",
       "      <td>-0.388853</td>\n",
       "      <td>-0.138878</td>\n",
       "      <td>-0.135406</td>\n",
       "      <td>-1.298495</td>\n",
       "      <td>1.368445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-0.033283</td>\n",
       "      <td>-0.003394</td>\n",
       "      <td>0.020894</td>\n",
       "      <td>-0.007328</td>\n",
       "      <td>-0.037816</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>-0.052508</td>\n",
       "      <td>-0.012108</td>\n",
       "      <td>2.017251</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.451551</td>\n",
       "      <td>-0.221127</td>\n",
       "      <td>-1.351780</td>\n",
       "      <td>-0.190865</td>\n",
       "      <td>-0.390287</td>\n",
       "      <td>-0.388853</td>\n",
       "      <td>-0.138878</td>\n",
       "      <td>-0.135406</td>\n",
       "      <td>-1.298495</td>\n",
       "      <td>1.368445</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration  src_bytes  dst_bytes      land  wrong_fragment    urgent  \\\n",
       "0 -0.033283  -0.003377  -0.017420 -0.007328       -0.037816 -0.003212   \n",
       "1 -0.033283  -0.003380   0.003670 -0.007328       -0.037816 -0.003212   \n",
       "2 -0.033283  -0.003393   0.003670 -0.007328       -0.037816 -0.003212   \n",
       "3 -0.033283  -0.003394   0.020894 -0.007328       -0.037816 -0.003212   \n",
       "4 -0.033283  -0.003394   0.020894 -0.007328       -0.037816 -0.003212   \n",
       "\n",
       "        hot  num_failed_logins  logged_in  num_compromised  ...  \\\n",
       "0 -0.052508          -0.012108   2.017251        -0.007657  ...   \n",
       "1 -0.052508          -0.012108   2.017251        -0.007657  ...   \n",
       "2 -0.052508          -0.012108   2.017251        -0.007657  ...   \n",
       "3 -0.052508          -0.012108   2.017251        -0.007657  ...   \n",
       "4 -0.052508          -0.012108   2.017251        -0.007657  ...   \n",
       "\n",
       "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
       "0                0.451551               -0.221127   \n",
       "1                0.451551               -0.221127   \n",
       "2                0.451551               -0.221127   \n",
       "3                0.451551               -0.221127   \n",
       "4                0.451551               -0.221127   \n",
       "\n",
       "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                    -1.287546                    -0.190865   \n",
       "1                    -1.330369                    -0.190865   \n",
       "2                    -1.330369                    -0.190865   \n",
       "3                    -1.351780                    -0.190865   \n",
       "4                    -1.351780                    -0.190865   \n",
       "\n",
       "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0             -0.390287                 -0.388853             -0.138878   \n",
       "1             -0.390287                 -0.388853             -0.138878   \n",
       "2             -0.390287                 -0.388853             -0.138878   \n",
       "3             -0.390287                 -0.388853             -0.138878   \n",
       "4             -0.390287                 -0.388853             -0.138878   \n",
       "\n",
       "   dst_host_srv_rerror_rate  ['service']['flag']0  ['service']['flag']1  \n",
       "0                 -0.135406             -1.298495              1.368445  \n",
       "1                 -0.135406             -1.298495              1.368445  \n",
       "2                 -0.135406             -1.298495              1.368445  \n",
       "3                 -0.135406             -1.298495              1.368445  \n",
       "4                 -0.135406             -1.298495              1.368445  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get column names first\n",
    "names = x.columns\n",
    "# Create the Scaler object\n",
    "scaler = preprocessing.StandardScaler()\n",
    "# Fit data on the scaler object\n",
    "scaled_df = scaler.fit_transform(x)\n",
    "scaled_df = pd.DataFrame(scaled_df, columns=names)\n",
    "\n",
    "x = pd.DataFrame(scaled_df)\n",
    "\n",
    "x[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#turn into numpy array \n",
    "x = x.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.03328263, -0.00337656, -0.01742011, ..., -0.13540625,\n",
       "        -1.29849548,  1.36844467],\n",
       "       [-0.03328263, -0.0033798 ,  0.00367024, ..., -0.13540625,\n",
       "        -1.29849548,  1.36844467],\n",
       "       [-0.03328263, -0.00339276,  0.00367024, ..., -0.13540625,\n",
       "        -1.29849548,  1.36844467],\n",
       "       ...,\n",
       "       [-0.03328263, -0.00273415, -0.02946467, ..., -0.13540625,\n",
       "         0.77012205, -0.73075662],\n",
       "       [-0.03328263, -0.00273415, -0.02946467, ..., -0.13540625,\n",
       "         0.77012205, -0.73075662],\n",
       "       [-0.03328263, -0.00273415, -0.02946467, ..., -0.13540625,\n",
       "         0.77012205, -0.73075662]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Shape:    (316588, 40)\n",
      "Transformed Shape: (316588, 2)\n",
      "[[ 1.98978475  2.25485525]\n",
      " [ 1.9594913   2.22934226]\n",
      " [ 1.9215678   2.20230955]\n",
      " ...\n",
      " [-2.01402194 -0.54920685]\n",
      " [-2.01402194 -0.54920685]\n",
      " [-2.01402194 -0.54920685]]\n"
     ]
    }
   ],
   "source": [
    "#Perform PCA to reduce dimensionality of feature vector for better accuracy\n",
    "#reduce from 37 to 2 dimensional space\n",
    "\n",
    "pca=PCA(n_components = 2)\n",
    "pca.fit(x)\n",
    "x_scaled = pca.transform(x)\n",
    "print (\"Original Shape:   \", x.shape)\n",
    "print (\"Transformed Shape:\",x_scaled.shape)\n",
    "\n",
    "x = x_scaled\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split into test and training sets. 25% test sample \n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state=45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 237441 samples, validate on 79147 samples\n",
      "Epoch 1/100\n",
      "237441/237441 [==============================] - 16s 67us/step - loss: 0.0897 - acc: 0.9722 - val_loss: 0.0721 - val_acc: 0.9786\n",
      "Epoch 2/100\n",
      "237441/237441 [==============================] - 15s 63us/step - loss: 0.0573 - acc: 0.9839 - val_loss: 0.0559 - val_acc: 0.9841\n",
      "Epoch 3/100\n",
      "237441/237441 [==============================] - 16s 69us/step - loss: 0.0558 - acc: 0.9843 - val_loss: 0.0557 - val_acc: 0.9843\n",
      "Epoch 4/100\n",
      "237441/237441 [==============================] - 15s 63us/step - loss: 0.0555 - acc: 0.9845 - val_loss: 0.0554 - val_acc: 0.9846\n",
      "Epoch 5/100\n",
      "237441/237441 [==============================] - 15s 62us/step - loss: 0.0553 - acc: 0.9846 - val_loss: 0.0562 - val_acc: 0.9846\n",
      "Epoch 6/100\n",
      "237441/237441 [==============================] - 15s 63us/step - loss: 0.0550 - acc: 0.9847 - val_loss: 0.0554 - val_acc: 0.9849\n",
      "Epoch 7/100\n",
      "237441/237441 [==============================] - 14s 61us/step - loss: 0.0534 - acc: 0.9847 - val_loss: 0.0504 - val_acc: 0.9849\n",
      "Epoch 8/100\n",
      "237441/237441 [==============================] - 15s 61us/step - loss: 0.0514 - acc: 0.9848 - val_loss: 0.0503 - val_acc: 0.9848\n",
      "Epoch 9/100\n",
      "237441/237441 [==============================] - 14s 61us/step - loss: 0.0512 - acc: 0.9849 - val_loss: 0.0514 - val_acc: 0.9848\n",
      "Epoch 10/100\n",
      "237441/237441 [==============================] - 15s 61us/step - loss: 0.0509 - acc: 0.9850 - val_loss: 0.0501 - val_acc: 0.9851\n",
      "Epoch 11/100\n",
      "237441/237441 [==============================] - 15s 63us/step - loss: 0.0501 - acc: 0.9850 - val_loss: 0.0491 - val_acc: 0.9849\n",
      "Epoch 12/100\n",
      "237441/237441 [==============================] - 14s 60us/step - loss: 0.0417 - acc: 0.9851 - val_loss: 0.0392 - val_acc: 0.9845\n",
      "Epoch 13/100\n",
      "237441/237441 [==============================] - 15s 61us/step - loss: 0.0361 - acc: 0.9852 - val_loss: 0.0358 - val_acc: 0.9850\n",
      "Epoch 14/100\n",
      "237441/237441 [==============================] - 14s 59us/step - loss: 0.0335 - acc: 0.9869 - val_loss: 0.0328 - val_acc: 0.9871\n",
      "Epoch 15/100\n",
      "237441/237441 [==============================] - 14s 58us/step - loss: 0.0314 - acc: 0.9881 - val_loss: 0.0283 - val_acc: 0.9882\n",
      "Epoch 16/100\n",
      "237441/237441 [==============================] - 14s 58us/step - loss: 0.0301 - acc: 0.9888 - val_loss: 0.0356 - val_acc: 0.9883\n",
      "Epoch 17/100\n",
      "237441/237441 [==============================] - 15s 64us/step - loss: 0.0294 - acc: 0.9888 - val_loss: 0.0257 - val_acc: 0.9893\n",
      "Epoch 18/100\n",
      "237441/237441 [==============================] - 14s 59us/step - loss: 0.0285 - acc: 0.9891 - val_loss: 0.0262 - val_acc: 0.9902\n",
      "Epoch 19/100\n",
      "237441/237441 [==============================] - 14s 58us/step - loss: 0.0274 - acc: 0.9894 - val_loss: 0.0309 - val_acc: 0.9889\n",
      "Epoch 20/100\n",
      "237441/237441 [==============================] - 14s 60us/step - loss: 0.0276 - acc: 0.9894 - val_loss: 0.0260 - val_acc: 0.9899\n",
      "Epoch 21/100\n",
      "237441/237441 [==============================] - 15s 62us/step - loss: 0.0267 - acc: 0.9899 - val_loss: 0.0233 - val_acc: 0.9909\n",
      "Epoch 22/100\n",
      "237441/237441 [==============================] - 15s 64us/step - loss: 0.0272 - acc: 0.9898 - val_loss: 0.0296 - val_acc: 0.9883\n",
      "Epoch 23/100\n",
      "237441/237441 [==============================] - 15s 62us/step - loss: 0.0261 - acc: 0.9899 - val_loss: 0.0258 - val_acc: 0.9895\n",
      "Epoch 24/100\n",
      "237441/237441 [==============================] - 15s 63us/step - loss: 0.0271 - acc: 0.9896 - val_loss: 0.0339 - val_acc: 0.9890\n",
      "Epoch 25/100\n",
      "237441/237441 [==============================] - 15s 62us/step - loss: 0.0262 - acc: 0.9900 - val_loss: 0.0260 - val_acc: 0.9895\n",
      "Epoch 26/100\n",
      "237441/237441 [==============================] - 15s 62us/step - loss: 0.0258 - acc: 0.9899 - val_loss: 0.0238 - val_acc: 0.9910\n",
      "Epoch 27/100\n",
      "237441/237441 [==============================] - 14s 60us/step - loss: 0.0257 - acc: 0.9900 - val_loss: 0.0252 - val_acc: 0.9901\n",
      "Epoch 00027: early stopping\n"
     ]
    }
   ],
   "source": [
    "# Create Neural Network, with 3 hidden layers and 1 output layer being subjected to the softmax probability function\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Dense(160,input_dim = x.shape[1], activation='relu', kernel_initializer='normal'))\n",
    "model.add(Dense(120,input_dim = x.shape[1], activation='relu', kernel_initializer='normal', )) \n",
    "model.add(Dense(60, input_dim = x.shape[1],  activation='relu', kernel_initializer='normal',))\n",
    "model.add(Dense(20, input_dim = x.shape[1],  activation='relu', kernel_initializer='normal',))\n",
    "model.add(Dense(10, input_dim = x.shape[1],  activation='relu', kernel_initializer='normal',))\n",
    "model.add(Dense(5, input_dim = x.shape[1],  activation='relu', kernel_initializer='normal',))\n",
    "model.add(Dense(y.shape[1],activation='softmax')) #takes in an input and spits out 1D vector\n",
    "\n",
    "#Add in hyper parameters\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])\n",
    "#Early stopping used to stop model from over or under fitting - stops when accuracy is no longer improving \n",
    "monitor = EarlyStopping(monitor='val_loss', min_delta=1e-4, patience=6, verbose=2, mode='auto', restore_best_weights=False, baseline=None)\n",
    "#Fit the model\n",
    "history = model.fit(x_train,y_train,validation_data=(x_test,y_test),callbacks=[monitor],verbose=1,epochs=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 99.00691119056944 %\n"
     ]
    }
   ],
   "source": [
    "# Measure accuracy\n",
    "predictors = model.predict(x_test)\n",
    "predictors = np.argmax(predictors,axis=1)\n",
    "prediction = np.argmax(y_test,axis=1)\n",
    "score = metrics.accuracy_score(predictors, prediction)\n",
    "print(\"Accuracy:\", score * 100,\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(predictors, prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[17394,   593],\n",
       "       [  346, 60814]])"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "#True Positive (TP) : Observation is positive, and is predicted to be positive.\n",
    "#False Negative (FN) : Observation is positive, but is predicted negative.\n",
    "#True Negative (TN) : Observation is negative, and is predicted to be negative.\n",
    "#False Positive (FP) : Observation is negative, but is predicted positive.\n",
    "\n",
    "TP = 17394\n",
    "FP = 593\n",
    "FN = 346\n",
    "TN = 60814"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:   98.81360001010778 %\n"
     ]
    }
   ],
   "source": [
    "Acc = ((TP + TN)/(TP + TN + FP + FN))\n",
    "\n",
    "print( \"Accuracy:  \", Acc * 100, '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall 98.04960541149944 %\n"
     ]
    }
   ],
   "source": [
    "# Recall \n",
    "\n",
    "TPR = ((TP)/(TP + FN))\n",
    "\n",
    "print(\"Recall\", TPR * 100, '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision 96.70317451492745 %\n"
     ]
    }
   ],
   "source": [
    "# Precision\n",
    "\n",
    "PPV = ((TP)/(TP+FP))\n",
    "\n",
    "print(\"Precision\", PPV * 100, '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot training history\n",
    "import matplotlib.pyplot as plt\n",
    "# summarize history for accuracy\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='lower right')\n",
    "plt.show()\n",
    "\n",
    "#show in the graph below the acurracy on both the trained and validated\n",
    "#has a ever so slight increase, meaning the model could be trained longer\n",
    "#to increase the accuracy of the model.It can also be seen that the model\n",
    "#has not been over or under fitted as both show some comparable skill."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Sequential' object has no attribute 'coef_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-88-7ae509986f6f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintercept_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'Sequential' object has no attribute 'coef_'"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "classifier = MLPClassifier(hidden_layer_sizes=(200,100,50), \n",
    "                           max_iter=50,activation = 'relu',solver='adam', \n",
    "                           early_stopping= True, learning_rate = 'constant', learning_rate_init = 0.007, tol = 1e-4, \n",
    "                           verbose = True, random_state=45, momentum = 0.3,n_iter_no_change = 10 )\n",
    "#Uses Log Loss function\n",
    "#same as Categorical\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MLPClassifier' object has no attribute 'coefs_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-142-b346ef6936a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcoef\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcoef\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefs_\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# size of synapsis weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefs_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'MLPClassifier' object has no attribute 'coefs_'"
     ]
    }
   ],
   "source": [
    "print([coef.shape for coef in classifier.coefs_])  # size of synapsis weights\n",
    "classifier.coefs_    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(2, 80), (80, 40), (40, 20), (20, 2)]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[array([[ 0.39070668, -0.0095305 , -0.58821245, -0.15002507, -0.13911593,\n",
       "         -0.07479691, -0.86073968, -0.74849099, -0.32702719, -0.08128118,\n",
       "          0.21909954,  0.12115087,  0.60788821, -0.19653769, -0.42727039,\n",
       "         -0.36779144,  0.49775864,  0.01299032, -0.0465915 , -0.61698692,\n",
       "          0.04559375, -0.16546397, -0.28916028, -0.01339267, -0.27314175,\n",
       "         -0.07139548, -0.07489877, -0.27503868,  0.59810007, -0.32082753,\n",
       "         -0.22018939, -0.43351422,  0.14673059, -0.19691467,  0.35146189,\n",
       "         -0.38009632, -0.01641073,  0.0394198 , -0.31304225, -0.24338826,\n",
       "          0.04490316,  0.01297158,  0.26626924, -0.6035025 , -0.67068754,\n",
       "          0.00949979, -0.1067745 , -0.32062097,  0.54677564,  0.03079092,\n",
       "         -0.50944086, -0.12057635,  0.53565611,  0.35392951, -0.72653112,\n",
       "         -0.05894547,  0.72123381,  0.05248167, -0.24907963, -0.64348219,\n",
       "         -0.23465619, -0.7109325 , -0.63463385, -0.04737852,  0.01277023,\n",
       "         -0.0388094 , -0.3832834 , -0.22201093, -0.36772511, -0.69972316,\n",
       "          0.0442362 ,  0.6201134 ,  0.12316956, -0.45879023, -0.22646189,\n",
       "          0.0569272 ,  0.63298607, -0.04297175, -0.61088602, -0.09638146],\n",
       "        [-0.49165102,  0.00446379,  0.19878734, -0.31911095,  0.3929033 ,\n",
       "         -0.04582528,  0.37573011,  0.17030074, -0.76711479,  0.03057992,\n",
       "          0.0929132 , -0.82603078, -0.05530004,  0.25092538, -0.04331655,\n",
       "          0.03658279,  0.08204086, -0.19608863, -0.0392628 ,  0.11456918,\n",
       "         -0.21536195, -0.5849908 , -0.56168472,  0.00161903, -0.83552312,\n",
       "         -0.15131654,  0.02351402, -0.86289949, -0.03910729, -0.88828706,\n",
       "          0.19676227, -0.65830816, -0.41509634, -0.57287012, -0.6103231 ,\n",
       "         -0.8115109 , -0.54570828, -0.5463187 , -0.87351853, -0.71626383,\n",
       "         -0.51056493, -1.0059388 , -0.43635203,  0.10595522,  0.11946003,\n",
       "         -0.116073  , -0.05261779, -0.8689405 , -0.21976805, -0.72372828,\n",
       "          0.33057639, -0.10049305, -0.07030091,  0.04047515,  0.24932986,\n",
       "         -0.00278725, -0.0764263 , -0.44038197, -0.32104603,  0.12037439,\n",
       "         -0.65011564,  0.21422346,  0.15311984, -0.02294125, -0.03515595,\n",
       "         -0.02760608, -0.63376322, -0.56975546, -1.04039396,  0.31551545,\n",
       "         -0.41889973, -0.10782403, -0.27356395,  0.32042553, -0.70108857,\n",
       "          0.24877935, -0.07853301, -0.03333235,  0.08928162, -0.0398731 ]]),\n",
       " array([[ 1.74013343e-003, -4.69839723e-001,  3.98089370e-001, ...,\n",
       "          5.81150268e-002, -1.36653446e-013,  8.78697370e-002],\n",
       "        [ 7.71102905e-229,  5.40312613e-004, -3.99826168e-006, ...,\n",
       "          5.20226567e-229, -9.12586559e-231, -6.20068349e-007],\n",
       "        [ 5.66965997e-001, -4.42270851e-002,  3.11871642e-001, ...,\n",
       "         -8.47433169e-002,  7.07388848e-004,  1.75263891e-001],\n",
       "        ...,\n",
       "        [ 5.65456189e-003, -1.91312844e-001,  1.06285434e-001, ...,\n",
       "         -1.20093113e-001,  1.81526713e-002,  2.19823581e-002],\n",
       "        [-1.20119625e-002,  1.66926577e-001, -1.99048994e-001, ...,\n",
       "         -1.86967057e-001,  2.03601046e-026, -2.33534299e-001],\n",
       "        [ 1.04757053e-001,  2.97651852e-002, -6.27005943e-003, ...,\n",
       "          1.63219747e-001, -2.89760554e-230, -1.04373505e-002]]),\n",
       " array([[-7.08475299e-001, -3.14383240e-001,  8.34649982e-001,\n",
       "         -1.97408304e-001,  4.23739913e-001,  1.23135869e-002,\n",
       "         -8.22359209e-001,  3.85479081e-002,  8.23098706e-002,\n",
       "         -2.58216116e-226,  2.62084022e-001, -4.10952686e-001,\n",
       "          3.81545679e-001,  4.07355135e-001,  6.19146476e-001,\n",
       "         -4.70513677e-002,  8.13612837e-222, -2.85392044e-227,\n",
       "          1.77409373e-228,  4.42330829e-001],\n",
       "        [ 4.59549407e-002,  2.82944184e-001,  5.90436314e-002,\n",
       "         -3.86921323e-002,  2.03752686e-002, -4.57127661e-001,\n",
       "          5.18540530e-002, -4.82910554e-001,  6.19627405e-002,\n",
       "         -1.63684265e-229,  7.53408180e-002, -2.19592577e-001,\n",
       "         -4.02870512e-001,  1.09783523e-001, -1.28303474e-001,\n",
       "         -1.34299133e-001,  1.75722679e-226,  3.18391451e-230,\n",
       "         -7.12278903e-229,  7.09763621e-003],\n",
       "        [ 3.01655374e-001,  1.04377869e-001, -9.72569384e-001,\n",
       "          2.27000223e-002, -1.71167161e-002, -1.50755554e+000,\n",
       "          5.31358835e-001, -2.05250624e-002,  6.64127541e-001,\n",
       "          1.72667272e-228,  3.06398797e-001, -1.70495184e-001,\n",
       "         -6.72317752e-002,  1.86573231e-001, -5.20759642e-002,\n",
       "          1.77590625e-001, -1.04104277e-228,  8.38145436e-230,\n",
       "         -9.20195321e-230, -2.60827493e-001],\n",
       "        [-1.96277929e-001, -2.80048289e-002,  1.25820572e-001,\n",
       "         -1.64437009e-001,  3.51564185e-001, -3.39128892e-002,\n",
       "         -4.49125516e-002,  1.40188945e-001,  2.92202153e-001,\n",
       "         -5.50994358e-227,  5.11384694e-002,  9.35569474e-002,\n",
       "          9.48158147e-002, -2.52268989e-001,  3.08302736e-002,\n",
       "         -5.53948413e-002,  1.90805265e-226,  6.80826711e-230,\n",
       "          1.85765596e-226, -1.01666031e-001],\n",
       "        [ 1.85742343e-001,  2.66939191e-001,  2.43950787e-001,\n",
       "          1.98621403e-003, -1.14264975e-001,  2.88377589e-001,\n",
       "          1.92318976e-001, -3.50622115e-001, -1.02413800e+000,\n",
       "         -1.32779306e-226, -4.71540864e-001,  3.22126904e-001,\n",
       "         -3.06074505e-001,  3.72610747e-001,  2.12926838e-001,\n",
       "         -2.25243717e-001,  4.93730729e-222, -3.23418778e-228,\n",
       "         -1.83576604e-227,  2.62569421e-001],\n",
       "        [ 2.04471275e-001,  4.12704476e-001,  3.58910377e-002,\n",
       "         -2.27048956e-001, -2.92346367e-002, -5.00221144e-001,\n",
       "          5.23878671e-001, -2.88139129e-001,  4.11117823e-001,\n",
       "          1.29283436e-226, -2.34241107e-001,  1.48256198e-001,\n",
       "         -4.62612503e-001,  3.30581263e-001,  1.25405579e-001,\n",
       "         -3.76741001e-001, -1.28621466e-229, -2.41485155e-232,\n",
       "          4.43498651e-230, -1.78654837e-001],\n",
       "        [ 3.29042459e-001, -2.71324791e-001, -4.68667407e-002,\n",
       "          3.24369338e-002,  8.67556229e-002,  1.37277444e-001,\n",
       "          3.14214654e-001,  4.64268420e-002,  4.49616381e-001,\n",
       "          1.80356535e-229,  2.27520405e-001,  9.28778806e-002,\n",
       "          9.89193589e-003,  2.05764771e-001,  6.41171803e-002,\n",
       "         -8.82719400e-002, -1.43311197e-223,  1.22086183e-230,\n",
       "          2.01738774e-222,  9.04870927e-002],\n",
       "        [-3.52935523e-001, -4.92569152e-001,  3.24169651e-001,\n",
       "         -1.11333459e-009,  5.59252027e-001,  3.63869886e-001,\n",
       "         -4.53868153e-001,  9.71953563e-001, -4.96384652e-001,\n",
       "          3.45764414e-222,  4.38025858e-001, -1.55716633e-003,\n",
       "         -2.98551015e-001,  4.14582244e-001,  3.04515340e-001,\n",
       "          4.09504328e-001, -7.99198302e-226,  2.67048430e-229,\n",
       "         -7.02651903e-231,  4.24769946e-001],\n",
       "        [-1.23170417e-001,  2.04716716e-001, -1.82730526e-001,\n",
       "         -3.13262332e-001,  3.27778904e-001,  1.78775719e-001,\n",
       "          4.15522576e-001, -6.35746448e-002,  6.19778816e-002,\n",
       "         -5.71453357e-224,  4.15258954e-001, -1.08336353e-002,\n",
       "         -2.66343118e-001,  6.75610750e-001,  4.49471903e-002,\n",
       "         -2.85681094e-001, -4.45818507e-231, -9.40623203e-227,\n",
       "          1.30206262e-223, -2.00028248e-002],\n",
       "        [-4.64386347e-001, -5.88075858e-001,  1.00210444e+000,\n",
       "          3.06031059e-108,  3.44936412e-003,  6.04055748e-001,\n",
       "         -6.31717442e-001, -1.12461485e-001, -5.53397087e-001,\n",
       "         -1.32176845e-229, -1.17295572e-001, -4.67782740e-001,\n",
       "          5.00926870e-001, -2.60473377e-001,  4.48090950e-002,\n",
       "          1.51445138e-003, -1.19781052e-228, -4.25137346e-228,\n",
       "         -2.48461936e-230,  9.29213481e-001],\n",
       "        [-2.14027649e-225, -7.97511671e-229,  2.37406090e-229,\n",
       "          3.01104636e-229, -3.81435087e-230,  3.13388986e-223,\n",
       "          2.93340663e-230, -2.22331900e-229, -2.63562160e-230,\n",
       "         -7.68111899e-225, -3.12604508e-229, -2.85612435e-227,\n",
       "          3.68978924e-226,  2.72368745e-226, -8.25355829e-225,\n",
       "         -5.59185702e-231,  3.86639154e-225,  1.56976546e-226,\n",
       "          5.23338475e-227,  5.37064098e-229],\n",
       "        [-7.81353106e-002, -5.74185000e-002, -2.12890909e-002,\n",
       "          2.60831435e-038, -2.05748967e-002, -2.89079094e-003,\n",
       "          3.67443087e-002,  3.05414380e-002,  8.09910961e-002,\n",
       "         -1.56636847e-227,  6.16924260e-003,  3.99071284e-003,\n",
       "         -1.03819133e-001, -2.49214440e-002,  3.22606893e-005,\n",
       "          8.94761408e-003,  1.56692111e-226, -4.17461255e-222,\n",
       "         -1.55487030e-229, -9.99523969e-003],\n",
       "        [ 1.88930524e-001,  1.13823716e-001,  1.49756548e-005,\n",
       "         -4.71458189e-229, -9.60175691e-231, -8.78971244e-003,\n",
       "          5.61536754e-002,  1.01911652e-113, -6.75564606e-007,\n",
       "         -4.39840439e-226, -4.73886443e-003, -6.32719176e-010,\n",
       "          1.51358226e-001, -1.98729283e-002, -3.15636829e-002,\n",
       "          1.16646225e-230, -6.18155594e-230, -1.80293256e-228,\n",
       "         -1.59634966e-227, -2.88157264e-002],\n",
       "        [-1.48221858e-001, -6.79236218e-002,  1.31206050e-001,\n",
       "         -3.38477530e-002,  1.97972160e-002, -1.27013466e-001,\n",
       "          7.87721199e-002, -1.05558009e-001, -4.26950171e-001,\n",
       "          9.09145299e-226,  1.95384928e-001,  1.81524985e-002,\n",
       "          4.56316530e-001, -5.38874940e-001, -1.23357368e-001,\n",
       "         -1.87069021e-001, -2.69375907e-223,  1.02905004e-228,\n",
       "         -2.22328507e-226,  3.36405707e-001],\n",
       "        [ 2.42902800e-229, -6.41132430e-227,  9.76884373e-228,\n",
       "         -2.00320716e-229,  2.44933562e-225, -5.02286954e-230,\n",
       "          4.09093331e-229, -1.32146665e-221, -2.93289441e-227,\n",
       "          2.33358300e-226, -7.23892156e-226, -6.11358007e-228,\n",
       "          8.22858457e-230, -1.50145887e-228, -7.83279020e-227,\n",
       "          4.18632248e-228, -1.32683782e-224, -3.44502538e-226,\n",
       "         -8.77455715e-228,  9.83368011e-230],\n",
       "        [ 1.57640358e-001, -6.64349215e-002,  5.94403693e-001,\n",
       "         -8.45584687e-003, -2.20339864e-001,  5.30060997e-001,\n",
       "          1.67849394e-001, -1.50530899e-001, -3.98748460e-001,\n",
       "          8.06754752e-225, -5.22288624e-001, -6.67987422e-001,\n",
       "         -1.32710037e-001,  2.32051622e-001,  4.62935909e-002,\n",
       "         -1.60458306e-001, -5.71452748e-224, -7.58562734e-232,\n",
       "         -1.95542987e-228, -6.39396381e-002],\n",
       "        [ 1.26137612e-001, -3.83724268e-002, -3.80453409e-002,\n",
       "         -5.15869760e-229,  1.49088457e-001,  2.17043026e-004,\n",
       "         -1.49071003e-001, -3.49626611e-002, -1.41399092e-001,\n",
       "         -3.49306406e-226, -5.20342109e-002,  6.91570461e-002,\n",
       "          1.45546706e-001, -1.32420582e-068, -7.30648220e-006,\n",
       "          9.56118410e-002,  2.00242164e-226,  1.54292742e-229,\n",
       "          3.83387414e-227,  6.36658448e-003],\n",
       "        [-7.90924270e-002,  1.98646070e-002, -1.03893199e-002,\n",
       "          7.07174073e-224, -2.36159786e-004, -2.11484217e-003,\n",
       "         -3.41697971e-002,  1.10411502e-022, -1.26258269e-002,\n",
       "          6.90101863e-222, -7.68499139e-002,  2.51233522e-002,\n",
       "         -6.20760059e-002, -2.12695689e-002, -3.92247401e-003,\n",
       "          5.90907839e-003,  7.00826393e-225, -9.66338470e-230,\n",
       "         -2.61705978e-226, -1.71558350e-002],\n",
       "        [ 5.18923677e-001,  4.56063156e-002, -9.24513942e-003,\n",
       "         -4.22734008e-002, -2.12244943e-001, -1.16749292e-001,\n",
       "          3.73522913e-001, -4.34053331e-002, -9.93657345e-002,\n",
       "         -2.87549987e-226, -1.08567822e-001, -2.26842818e-001,\n",
       "         -3.47633004e-001, -2.32423901e-001, -7.50826558e-002,\n",
       "         -1.34228470e-003, -5.59011361e-230, -1.36374689e-229,\n",
       "         -1.61165660e-228, -1.49237115e-001],\n",
       "        [-6.32632905e-001, -4.40518905e-001,  4.17901813e-001,\n",
       "          1.18607394e-002, -1.21992600e-002, -1.18601555e-001,\n",
       "         -9.19084910e-001, -1.92417713e-001,  4.70836182e-001,\n",
       "          1.73495065e-229,  3.43903664e-001, -6.52745468e-001,\n",
       "          4.17616733e-001,  9.46865458e-001,  3.00605447e-001,\n",
       "         -2.16347600e-001,  1.69297455e-228,  1.28211195e-221,\n",
       "         -1.04175357e-229,  8.33861993e-001],\n",
       "        [ 1.53559733e-001,  5.60256137e-002,  2.41606068e-001,\n",
       "          1.32854397e-001, -2.10357256e-002, -1.54358711e-001,\n",
       "          5.22568671e-002,  1.40703540e-001,  3.08107546e-001,\n",
       "         -1.88121407e-230,  1.72063033e-001,  1.05144094e-001,\n",
       "          2.52363325e-001, -1.44927118e-001,  1.65913547e-001,\n",
       "         -1.65754930e-001,  4.72679689e-222, -1.62073799e-224,\n",
       "         -1.66934448e-224,  3.17906017e-002],\n",
       "        [ 3.02373039e-001,  1.09821468e-001,  3.04219492e-001,\n",
       "         -4.03285387e-002, -3.24725382e-001, -1.66698444e-001,\n",
       "          3.05237132e-002, -3.19708956e-001, -1.60562071e-001,\n",
       "          1.09512221e-221, -1.41174376e-001,  1.01715886e-001,\n",
       "         -1.59608152e-001,  2.07028890e-001,  1.84662545e-001,\n",
       "         -4.93920128e-001,  1.50524362e-230, -4.05399618e-226,\n",
       "         -5.68505149e-230, -3.01182980e-002],\n",
       "        [ 5.21321914e-002,  1.99446925e-001,  3.44675797e-001,\n",
       "         -6.65767909e-002, -4.44874136e-001,  3.84757329e-001,\n",
       "         -1.13581851e-001,  4.75237713e-004, -2.06007914e-001,\n",
       "         -1.95338441e-224, -2.31009853e-001, -2.49130366e-001,\n",
       "          1.69679349e-001, -1.36054708e-001, -4.06342290e-001,\n",
       "          2.12228787e-003,  3.45614059e-227,  3.37249107e-229,\n",
       "          5.88735682e-225,  3.77816902e-001],\n",
       "        [-8.63982138e-229, -6.38653481e-225,  1.89311493e-229,\n",
       "         -1.03155924e-227,  6.22431158e-226,  2.00352807e-226,\n",
       "          1.10495627e-224, -4.05183837e-222, -1.82917693e-224,\n",
       "          6.45718604e-228,  1.03829437e-230,  1.09724643e-228,\n",
       "         -2.44890106e-229, -4.91070986e-223,  8.99755200e-230,\n",
       "         -2.61559865e-228,  9.98038307e-228,  1.54508618e-229,\n",
       "         -5.48780525e-225, -1.31554334e-227],\n",
       "        [-4.88845379e-001, -4.35043410e-001,  8.62024744e-001,\n",
       "         -1.74915941e-001,  3.61600898e-001,  7.54354179e-003,\n",
       "         -5.31764651e-001,  5.20992785e-002,  3.96708538e-002,\n",
       "          1.30254570e-227,  9.26198066e-002, -1.05462648e-001,\n",
       "          3.04236374e-002,  5.55782806e-001,  4.78265310e-001,\n",
       "          5.19666997e-002, -1.57780317e-228, -7.87374573e-225,\n",
       "          1.31303995e-230,  5.83250182e-001],\n",
       "        [-7.43299112e-105,  1.24197063e-130, -4.79662520e-145,\n",
       "         -3.48847940e-185, -4.14797172e-154, -1.56981950e-169,\n",
       "         -6.56678280e-103, -2.97167070e-185, -3.27499440e-148,\n",
       "         -9.24608084e-228, -1.83974518e-109, -5.15822889e-110,\n",
       "          6.75305317e-143, -1.65402304e-137,  4.90526094e-170,\n",
       "          3.64237061e-229, -1.40959083e-230, -2.70261145e-228,\n",
       "          2.59327071e-224,  7.83589699e-118],\n",
       "        [ 9.16304692e-001,  5.06126478e-001, -7.02091461e-001,\n",
       "         -1.78402740e-001, -4.52225135e-001, -1.18666169e-001,\n",
       "          8.93190415e-001, -9.28995673e-003,  1.08390685e-001,\n",
       "         -8.41224368e-226,  2.02307010e-001,  6.58826642e-001,\n",
       "          8.19597348e-002, -4.95638432e-001, -1.17790419e-001,\n",
       "         -1.20250946e-001,  6.70481414e-225, -7.65884318e-223,\n",
       "         -1.69624075e-226, -4.84824429e-002],\n",
       "        [-4.24508570e-002,  2.92348835e-002, -1.87797702e-001,\n",
       "         -2.01428485e-001, -7.58853864e-002,  9.29077529e-002,\n",
       "         -2.24512167e-002, -1.79666295e-002,  2.96421480e-001,\n",
       "          2.33510790e-231,  1.08976903e-001, -4.94626403e-002,\n",
       "         -2.21207434e-003, -3.33113046e-001, -1.66253227e-001,\n",
       "         -2.01424498e-001,  2.61257485e-227,  8.41456193e-230,\n",
       "          2.19465840e-230,  3.97276588e-002],\n",
       "        [ 3.62917426e-002, -6.76951327e-002,  6.93788205e-002,\n",
       "         -1.31353076e-223, -1.05791971e-001,  9.91478588e-002,\n",
       "         -7.18581625e-002, -3.95287853e-002, -1.14874576e-001,\n",
       "         -1.35175829e-225, -1.12428811e-001, -6.27143143e-002,\n",
       "          1.32483945e-001,  6.66593628e-002, -3.24900400e-016,\n",
       "          1.34998570e-001, -8.99647506e-226, -9.30173017e-228,\n",
       "          6.94844643e-229,  8.93001621e-002],\n",
       "        [ 1.04042272e+000,  8.22729781e-001, -2.31647069e+000,\n",
       "          8.88273256e-002, -3.72934885e-002, -2.30715092e+000,\n",
       "          8.98636007e-001, -4.81545301e-002,  6.45932196e-001,\n",
       "          9.90910487e-229,  5.72729598e-001,  7.81011493e-001,\n",
       "          2.47123044e-001, -1.27461555e-001, -5.39562210e-002,\n",
       "          1.35915373e-001,  2.37326230e-225,  1.74468765e-229,\n",
       "          2.48722888e-229, -1.26259932e-002],\n",
       "        [-9.51812131e-001, -1.26124348e+000,  1.86863180e+000,\n",
       "         -3.08624789e-005, -1.05033808e-001,  1.88090966e+000,\n",
       "         -9.42981276e-001,  2.27733718e-001, -4.23922542e-001,\n",
       "         -9.98998162e-229,  1.21540119e-001, -9.33831866e-001,\n",
       "          1.31691251e+000, -3.71251872e-001, -3.35892527e-001,\n",
       "         -1.74554540e-005, -1.62323437e-224,  2.41539711e-223,\n",
       "          2.53829866e-227,  1.36051001e+000],\n",
       "        [ 1.33937939e-002,  3.03730183e-001,  2.36765817e-001,\n",
       "         -1.53812737e-001, -8.54210180e-001,  4.25127429e-001,\n",
       "          5.06612155e-001, -4.89545715e-001, -2.41188041e-001,\n",
       "         -1.13161689e-223, -2.12246854e-001,  4.78100551e-001,\n",
       "          2.28982753e-001, -2.74422712e-001,  3.72894917e-001,\n",
       "         -8.86780325e-002, -4.12118799e-226,  7.18894736e-222,\n",
       "         -2.65465993e-226,  5.89994854e-001],\n",
       "        [ 2.11251056e-001,  2.84859258e-001, -6.64492569e-002,\n",
       "         -2.14454308e-001,  3.38878663e-002,  2.15569522e-001,\n",
       "          2.06569779e-001,  2.34088749e-002,  1.42216502e-001,\n",
       "         -3.33140676e-225,  4.40209668e-001, -6.13728150e-002,\n",
       "          1.19144204e-001, -1.26604299e-002,  7.91291311e-002,\n",
       "         -5.60960363e-002,  8.12194635e-222, -3.53932139e-226,\n",
       "          2.48606285e-226,  1.08134628e-001],\n",
       "        [-3.49494767e-001,  1.17404086e-002,  6.71832446e-001,\n",
       "          8.05513650e-004, -7.91257017e-001,  2.43200973e-001,\n",
       "         -2.18806552e-001,  2.35895052e-001, -4.33312562e-001,\n",
       "          7.45670499e-225, -4.13708183e-001, -8.28898878e-001,\n",
       "          1.24013740e-001,  4.61398271e-001, -8.02735994e-002,\n",
       "         -3.56691389e-002, -1.02364385e-228,  1.09875860e-224,\n",
       "         -2.70139011e-226, -1.93131557e-001],\n",
       "        [-1.16836592e-001, -6.77775559e-002,  4.21268864e-002,\n",
       "          1.21683293e-001, -1.10544658e-001, -1.43538779e-001,\n",
       "         -4.56887713e-002,  2.58539917e-001,  3.94274732e-001,\n",
       "         -3.21841951e-229, -1.73120239e-001,  2.23387958e-002,\n",
       "          1.94088572e-001, -1.50270127e-001, -2.08231395e-001,\n",
       "          1.56231419e-001, -2.44580677e-224, -7.47259425e-222,\n",
       "         -1.90869818e-229, -1.13807896e-001],\n",
       "        [ 1.59835980e-001,  1.58344686e-001, -6.96095706e-002,\n",
       "         -3.68851276e-003, -3.39261124e-002, -6.29344560e-001,\n",
       "          1.48831656e-001,  1.96822012e-001, -1.88526591e-001,\n",
       "          7.77667300e-223,  4.09915958e-001,  5.46941523e-002,\n",
       "         -1.14341574e+000,  4.58381720e-001,  3.32818606e-001,\n",
       "          2.33158505e-002,  1.41906765e-227, -1.11467844e-226,\n",
       "          2.26830248e-227, -1.79709572e+000],\n",
       "        [-3.85619434e-230,  6.55178429e-228, -1.53517374e-229,\n",
       "         -1.20969637e-221, -4.13779044e-229,  4.60088501e-226,\n",
       "          8.51870896e-230,  8.89710098e-229,  3.33732522e-226,\n",
       "          2.81802087e-224,  2.83846593e-227,  7.91315710e-229,\n",
       "         -1.41772593e-224,  4.04680323e-229, -1.53730436e-228,\n",
       "          1.16637248e-229, -4.59541564e-229,  1.19909471e-229,\n",
       "          3.05191676e-226, -3.22832257e-225],\n",
       "        [-3.75645389e-002,  1.62722195e-001, -1.71711302e-001,\n",
       "         -1.26231046e-001,  3.02979274e-001,  6.40802847e-002,\n",
       "         -2.93280028e-002,  1.17004734e-001,  2.43523469e-001,\n",
       "          2.89851189e-229,  4.05247844e-001,  5.45317078e-002,\n",
       "         -6.46076544e-002, -1.72573938e-001,  1.10821014e-001,\n",
       "          1.99121257e-001, -1.34464447e-225, -4.31405072e-229,\n",
       "         -5.21337258e-226, -4.07420118e-002],\n",
       "        [ 5.65635669e-003,  6.59776638e-005,  1.27750879e-227,\n",
       "         -2.45249355e-228,  7.96776088e-231,  9.11728052e-010,\n",
       "          1.18443690e-002,  4.27597393e-227, -6.16593695e-004,\n",
       "          1.75035677e-229,  6.44614078e-005, -4.08743246e-008,\n",
       "         -2.82588415e-006,  1.78163399e-224,  9.77748237e-018,\n",
       "         -4.56128499e-225, -3.22352106e-223, -8.38339200e-230,\n",
       "          2.76476115e-226,  2.98832412e-004],\n",
       "        [ 4.70558495e-001,  3.95068010e-001, -3.29336576e-001,\n",
       "          3.84165984e-002, -1.65587190e-001, -2.45595021e-001,\n",
       "          3.26303118e-001, -8.76052447e-002,  3.97547805e-001,\n",
       "          1.98902374e-227,  4.06715356e-001,  2.93564816e-001,\n",
       "          6.81770716e-001, -6.33496213e-001, -5.77256364e-002,\n",
       "          7.15556927e-002,  2.53958934e-227, -3.24023049e-226,\n",
       "          3.51651334e-230,  2.64918534e-001]]),\n",
       " array([[ 5.72439742e-001, -5.91363839e-001],\n",
       "        [ 4.77038620e-001, -3.38713227e-001],\n",
       "        [-8.03109125e-001,  9.30484652e-001],\n",
       "        [ 2.68186014e-001,  2.61548128e-001],\n",
       "        [-2.50328066e-001,  6.69306921e-002],\n",
       "        [-8.39365915e-001,  1.11683397e+000],\n",
       "        [ 7.24426314e-001, -7.53980775e-001],\n",
       "        [-7.11547353e-001,  7.99517615e-001],\n",
       "        [-4.20160155e-001,  4.48693203e-001],\n",
       "        [-4.78705394e-220,  3.96194936e-229],\n",
       "        [-3.80994858e-001,  3.91937233e-001],\n",
       "        [ 9.49020262e-001, -5.75814448e-001],\n",
       "        [-4.87693581e-001,  3.62417633e-001],\n",
       "        [-2.71240019e-001,  6.14847297e-001],\n",
       "        [-3.58673282e-001, -3.57799583e-001],\n",
       "        [ 1.98807378e-001,  1.25281786e-001],\n",
       "        [-3.34876321e-230, -2.81995330e-216],\n",
       "        [ 1.02099973e-228, -3.11254496e-217],\n",
       "        [ 1.42505271e-230,  1.46055043e-230],\n",
       "        [-9.43292835e-001,  7.06852566e-001]])]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print([coef.shape for coef in classifier.coefs_])  # size of synapsis weights\n",
    "classifier.coefs_    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1, loss = 0.10223881\n",
      "Validation score: 0.987321\n",
      "Iteration 2, loss = 0.08522915\n",
      "Validation score: 0.987546\n",
      "Iteration 3, loss = 0.08134421\n",
      "Validation score: 0.987636\n",
      "Iteration 4, loss = 0.07426085\n",
      "Validation score: 0.987591\n",
      "Iteration 5, loss = 0.06923652\n",
      "Validation score: 0.986328\n",
      "Iteration 6, loss = 0.06641740\n",
      "Validation score: 0.988494\n",
      "Iteration 7, loss = 0.06298693\n",
      "Validation score: 0.987952\n",
      "Iteration 8, loss = 0.06170771\n",
      "Validation score: 0.988313\n",
      "Iteration 9, loss = 0.06146949\n",
      "Validation score: 0.989667\n",
      "Iteration 10, loss = 0.06070509\n",
      "Validation score: 0.989171\n",
      "Iteration 11, loss = 0.05818088\n",
      "Validation score: 0.991291\n",
      "Iteration 12, loss = 0.05712636\n",
      "Validation score: 0.989532\n",
      "Iteration 13, loss = 0.05633165\n",
      "Validation score: 0.987997\n",
      "Iteration 14, loss = 0.05648461\n",
      "Validation score: 0.991021\n",
      "Iteration 15, loss = 0.05689020\n",
      "Validation score: 0.990750\n",
      "Iteration 16, loss = 0.05686285\n",
      "Validation score: 0.987501\n",
      "Iteration 17, loss = 0.05493632\n",
      "Validation score: 0.987366\n",
      "Iteration 18, loss = 0.05472648\n",
      "Validation score: 0.991382\n",
      "Iteration 19, loss = 0.05675096\n",
      "Validation score: 0.988900\n",
      "Iteration 20, loss = 0.05539097\n",
      "Validation score: 0.989126\n",
      "Iteration 21, loss = 0.05322013\n",
      "Validation score: 0.991607\n",
      "Iteration 22, loss = 0.05346584\n",
      "Validation score: 0.991156\n",
      "Iteration 23, loss = 0.05361670\n",
      "Validation score: 0.989622\n",
      "Iteration 24, loss = 0.05362937\n",
      "Validation score: 0.991066\n",
      "Iteration 25, loss = 0.05364544\n",
      "Validation score: 0.991698\n",
      "Iteration 26, loss = 0.05343770\n",
      "Validation score: 0.991021\n",
      "Iteration 27, loss = 0.05206753\n",
      "Validation score: 0.991201\n",
      "Iteration 28, loss = 0.05454294\n",
      "Validation score: 0.989396\n",
      "Iteration 29, loss = 0.05736460\n",
      "Validation score: 0.988900\n",
      "Iteration 30, loss = 0.05276729\n",
      "Validation score: 0.991201\n",
      "Iteration 31, loss = 0.05168984\n",
      "Validation score: 0.990389\n",
      "Iteration 32, loss = 0.05199311\n",
      "Validation score: 0.990840\n",
      "Validation score did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "              beta_2=0.999, early_stopping=True, epsilon=1e-08,\n",
       "              hidden_layer_sizes=(200, 100, 50), learning_rate='constant',\n",
       "              learning_rate_init=0.007, max_iter=50, momentum=0.3,\n",
       "              n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "              random_state=45, shuffle=True, solver='adam', tol=0.0001,\n",
       "              validation_fraction=0.1, verbose=True, warm_start=False)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting the training data to the network\n",
    "classifier.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pickle' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-119-362869ba22f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Save the trained model as a pickle string.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0msaved_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassifier\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'pickle' is not defined"
     ]
    }
   ],
   "source": [
    "#import pickle \n",
    "  \n",
    "# Save the trained model as a pickle string. \n",
    "saved_model = pickle.dumps(classifier) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the pickled model \n",
    "#classifier_from_pickle = pickle.loads(saved_model) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_pred.argmax(axis = 1), y_test.argmax(axis = 1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[21195,   783],\n",
       "       [   70, 72929]])"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "#True Positive (TP) : Observation is positive, and is predicted to be positive.\n",
    "#False Negative (FN) : Observation is positive, but is predicted negative.\n",
    "#True Negative (TN) : Observation is negative, and is predicted to be negative.\n",
    "#False Positive (FP) : Observation is negative, but is predicted positive.\n",
    "\n",
    "TP = 21195\n",
    "FP = 783\n",
    "FN = 70\n",
    "TN = 72929"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.9910188782547353\n"
     ]
    }
   ],
   "source": [
    "Acc = ((TP + TN)/(TP + TN + FP + FN))\n",
    "\n",
    "print( \"Accuracy\", Acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall 0.9985381495803075\n"
     ]
    }
   ],
   "source": [
    "# Recall \n",
    "\n",
    "Recall = ((TP)/(TP + FN))\n",
    "\n",
    "print(\"Recall\", Recall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision 0.9469612271365323\n"
     ]
    }
   ],
   "source": [
    "# Precision\n",
    "\n",
    "Precision = ((TP)/(TP+FP))\n",
    "\n",
    "print(\"Precision\", Precision)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'number of steps')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.plot(classifier.loss_curve_)\n",
    "plt.title('Loss During GD')\n",
    "plt.ylabel('loss function')\n",
    "plt.xlabel('number of steps')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.6 (tensorflow)",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
